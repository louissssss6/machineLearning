import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px

data = pd.read_csv(r'C:\Users\louis\Desktop\data\Covid\covid_19_data.csv')
NAN = [(c, data[c].isna().mean()*100) for c in data]
NAN = pd.DataFrame(NAN, columns=['column_name', 'percentage'])
data['Province/State'] = data['Province/State'].fillna('Unknow')
data[['Confirmed', 'Deaths', 'Recovered']] = data[['Confirmed', 'Deaths', 'Recovered']].astype(int)
data['Country/Region'] = data['Country/Region'].replace('Mainland China', 'China')
data['Active_case'] = data['Confirmed'] - data['Deaths'] - data['Recovered']
data.head()

Data = data[data['ObservationDate'] == max(data['ObservationDate'])].reset_index()
Data_world = Data.groupby(['ObservationDate'])[['Confirmed', 'Active_case', 'Recovered', 'Deaths']].sum().reset_index()
Data_world.head()

labels = ['Last Update', 'Confirmed', 'Active cases', 'Recovered', 'Deaths']
fig = go.Figure(data=[go.Table(header=dict(values=labels),
                              cells=dict(values=Data_world.loc[0, ['ObservationDate', 'Confirmed', 'Active_case', 'Recovered', 'Deaths']]))])
fig.update_layout(title='Coronavirus in the world')
fig.show()

labels = ['Active cases', 'Recovered', 'Deaths']
values = Data_world.loc[0,['Active_case', 'Recovered', 'Deaths']]
fig = px.pie(Data_world, values=values, names=labels, color_discrete_sequence=['rgb(77, 146, 33)', 'rgb(69,144,185)','rgb(77,77,77)'], hole=0.7)
fig.update_layout(title='Total cases' + str(Data_world['Confirmed'][0]))
fig.show()

data_over_time = data.groupby(['ObservationDate'])[['Confirmed',
                        'Active_case', 'Recovered', 'Deaths']].sum().reset_index().sort_values("ObservationDate", ascending=True).reset_index()
                                                    
fig = go.Figure()
fig.add_trace(go.Scatter(x=data_over_time.index, y=data_over_time['Confirmed'],
                        mode = 'lines',
                        name='Confirmed cases'))
fig.update_layout(title='Evolution of Confirmed cases over time in the world',
                 template='plotly_white',
                 yaxis_title='Confirmed cases',
                 xaxis_title='Days')
fig.show()

fig = go.Figure()
fig.add_trace(go.Scatter(x=data_over_time.index, y=data_over_time['Active_case'],
                        mode='lines', marker_color='yellow',
                        name='Active cases', line=dict(dash='dot')))
fig.update_layout(title='Evolution of Active cases over time in the world',
                 template='plotly_dark',
                 yaxis_title='Active cases',
                 xaxis_title='Days')
fig.show()

fig = go.Figure(go.Bar(x=data_over_time['ObservationDate'],
          y=data_over_time['Confirmed'],))

fig.update_layout(title='Confirmed Cases in Each Day',
                 template='plotly_white',
                 xaxis_title="Days",
                 yaxis_title='Confirmed cases')
fig.show()

fig = go.Figure(go.Bar(
            x=data_over_time['ObservationDate'],
            y=data_over_time['Recovered'],
    marker_color='blue'))

fig.update_layout(
    title='Recovered Cases In Each Day',
    template='plotly_white',
    xaxis_title='Recovered Cases',
    yaxis_title='Days')
fig.show()

Data_per_country = Data.groupby(['Country/Region'])[['Confirmed', 'Active_case', 'Recovered', 'Deaths']].sum().reset_index().sort_values('Confirmed', ascending=True)
Data_per_country.head()

fig = go.Figure(data=[go.Table(
  header=dict(
    values=['<b>Country</b>','<b>Confirmed Cases</b>'],
    line_color='blue',
    fill_color='lightblue',
    align=['left','center'],
      
    font=dict(color='white', size=12)
  ),
  cells=dict(
    values=[
      Data_per_country['Country/Region'],
      Data_per_country['Confirmed'],
      ],
    line_color='darkslategray',
    # 2-D list of colors for alternating rows
    fill_color = [[rowOddColor,rowEvenColor,rowOddColor, rowEvenColor,rowOddColor]*len(Data_per_country)],
    align = ['left', 'center'],
    font = dict(color = 'darkslategray', size = 11)
    ))
])
fig.update_layout(
    title='Confirmed Cases In Each Country',
)
fig.show()

fig = go.Figure(data=[go.Table(header=dict(values=['<b>country</b>', '<b>Deaths</b>'],
                                          line_color='blue',
                                           fill_color='grey',
                                           align=['left', 'center'],
                                           font=dict(color='white', size=12),
                                          ),
                              cells=dict(values=[Data_per_country['Country/Region'], Data_per_country['Deaths']],
                                        line_color='darkslategray',
                                        fill_color='white',
                                        align=['left', 'center'],
                                        font=dict(color='black', size=10)))])
fig.update_layout(title='Deaths cases in Each Country')
fig.show()

fig = px.choropleth(Data_per_country, locations=Data_per_country['Country/Region'],
                   color=Data_per_country['Confirmed'], locationmode='country names',
                   hover_name=Data_per_country['Country/Region'],
                   color_continuous_scale=px.colors.sequential.Tealgrn, template='plotly_dark')
fig.update_layout(
    title='Confirmed Cases In Each Country',
)
fig.show()

fig = px.choropleth(Data_per_country, locations=Data_per_country['Country/Region'],
                   color=Data_per_country['Active_case'], locationmode='country names',
                   hover_name=Data_per_country['Country/Region'],
                    color_continuous_scale=px.colors.sequential.Tealgrn,
                   template='plotly_white')
fig.update_layout(title='Active Cases In Each Day')
fig.show()

data_per_country = data.groupby(['Country/Region', 'ObservationDate'])[['Confirmed', 'Active_case', 'Recovered', 'Deaths']].sum().reset_index().sort_values('ObservationDate', ascending=True).reset_index(drop=True)

fig = px.choropleth(data_per_country, locations=data_per_country['Country/Region'],
                    color=data_per_country['Confirmed'],locationmode='country names', 
                    hover_name=data_per_country['Country/Region'], 
                    color_continuous_scale=px.colors.sequential.deep,
                    animation_frame="ObservationDate")
fig.update_layout(

    title='Evolution of confirmed cases In Each Country',
)
fig.show()

fig = go.Figure(data=[go.Bar(x=Data_per_country['Country/Region'][-10:], y=Data_per_country['Confirmed'][0:10],
                            text=Data_per_country['Confirmed'][-10:],
                            textposition='auto',
                            marker_color='black',)])

fig.update_layout(title='Most 10 infected countries',
                 xaxis_title='Countries',
                 yaxis_title='Countries Cases',
                 template='plotly_white')
fig.show()

fig = go.Figure(data=[go.Scatter(x=Data_per_country['Country/Region'][-10:],
                                y=Data_per_country['Confirmed'][-10:],
                                 mode='markers',
                                 marker=dict(color=100+np.random.randn(500),
                                            size=(Data_per_country['Confirmed'][-10:]/20000),
                                            showscale=True)
                                )])
fig.update_layout(title='Most 10 infected Country',
                 xaxis_title='Countries',
                 yaxis_title='Confirmed cases',
                 template='plotly_dark')

fig.show()

data_china = data[data['Country/Region'].isin(['China'])].reset_index(drop=True)
data_china_last = data_china[data_china['ObservationDate'] == max(data_china['ObservationDate'])].reset_index()
data_china_last.head()

fig = px.pie(data_china_last, values=data_china_last['Confirmed'], names=data_china_last['Province/State'], title='Confirmed cases in China',
            hole=0.2)
fig.update_traces(textposition='inside', textinfo='percent+label')
fig.show()

data_china_per_state = data_china.groupby('Province/State')[['Confirmed', 'Active_case', 'Recovered', 'Deaths']].sum().reset_index()
fig = go.Figure(go.Bar(
            x=data_china_per_state['Active_case'],
            y=data_china_per_state['Province/State'],
            orientation='h',
            marker_color='#DC3912',))
fig.update_layout(
    title='Active Cases In Each Province/State in all',
    template='plotly_white',
    xaxis_title="Active Cases",
    yaxis_title="Province/State",
)
fig.show()

fig = go.Figure(go.Bar(x=data_china_last['Active_case'],
                      y=data_china_last['Province/State'],
                      orientation='h',
                      marker_color='rgb(122, 45, 56)'))
fig.update_layout(title='Active cases in each province/state in 6.22',
                template='plotly_white',
                xaxis_title='Active Cases',
                yaxis_title='Province/State')
fig.show()

fig = go.Figure(go.Bar(x=data_china_last['Recovered'],
                      y=data_china_last['Province/State'],
                      orientation='h',
                      marker_color='green'))
fig.update_layout(title='Active case in each province in 6.22',
                 template='plotly_white',
                 xaxis_title='Recovered cases',
                 yaxis_title='Province/State')
fig.show()

fig = go.Figure(go.Bar(x=data_china_last['Deaths'],
                      y=data_china_last['Province/State'],
                      orientation='h',
                      marker_color='blue'))
fig.update_layout(title='active case in china in 6.22',
                  template='plotly_white',
                 xaxis_title='Death cases',
                 yaxis_title='Province/State')
                 
data_china_total= data_china_last.groupby(["Country/Region"])["Confirmed","Deaths","Recovered","Active_case"].sum().reset_index().reset_index(drop=True)
labels = ['Active cases', 'Recovered', 'Deaths']
values = data_china_total.loc[0, ['Active_case', 'Recovered', 'Deaths']]
fig = px.pie(data_china_total, values=values, names=labels, color_discrete_sequence=['green', 'royalblue', 'darkblue'], hole=0.5)
fig.update_layout(title='Total cases in China: ' + str(data_china_total['Confirmed'][0]))
fig.show()

data_china_op= data_china.groupby(["ObservationDate","Country/Region"])["Confirmed","Deaths","Recovered","Active_case"].sum().reset_index().reset_index(drop=True)
fig = go.Figure()
fig.add_trace(go.Scatter(x=data_china_op['ObservationDate'], y=data_china_op['Confirmed'],
                    mode='lines',
                    name='Confirmed cases'))
fig.add_trace(go.Scatter(x=data_china_op['ObservationDate'], y=data_china_op['Active_case'], mode='lines', name='Active cases', line=dict(dash='dot')
                        ))
fig.add_trace(go.Scatter(x=data_china_op['ObservationDate'], y=data_china_op['Recovered'], mode='lines', name='Recovered cases', marker_color='green'))
fig.update_layout(title='Evoluation of cases over time in China',
                 template='plotly_white')
fig.show()
